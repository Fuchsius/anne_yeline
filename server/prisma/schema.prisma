datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model
// This model represents the users of the application, including customers and admins.
// It contains fields for user information, such as name, email, password, and role.

model User {
  id               Int       @id @default(autoincrement())
  fullName         String?
  firstName        String
  lastName         String
  username         String?   @unique
  email            String    @unique
  dateOfBirth      DateTime?
  gender           String?
  phone            String?
  profilePic       String?
  role             Int       @default(1)
  password         String
  registrationDate DateTime  @default(now())
  status           String    @default("active")
  address          Address[]
  orders           Order[]
  cart             Cart[]
  reviews          Reviews[]
  roleRelation     Role      @relation(fields: [role], references: [id])
}

// Role model
model Role {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  users       User[]
}

// Address model
model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  user      User     @relation(fields: [userId], references: [id])
  orders    Order[]

  @@index([userId])
}

// Order model
// This model represents the orders placed by users.
// It contains fields for order information, such as user ID, order date, total amount, and status.
// It also establishes a relationship with the User model and contains an array of OrderItem models.
// The OrderItem model represents the individual items within an order, including product ID, quantity, and price.

model Order {
  id               Int       @id @default(autoincrement())
  orderNumber      String?   @unique
  userId           Int
  status           String    @default("PENDING")
  totalPrice       Float
  subtotal         Float?
  shippingCost     Float?    @default(0)
  paymentMethod    String?
  isPaid           Boolean   @default(false)
  paymentSlipUrl   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  statusHistory    String?   
  statusDates      String?   
  
  // Relations
  user             User      @relation(fields: [userId], references: [id])
  items            OrderItem[]
  shippingAddress  Address?  @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId Int?
  products         Product[]
}

// OrderItem model
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  
  // Relations
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

// Cart model
model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

// CartItem model
model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

// Category model
// This model represents the categories of products.
// It contains fields for category information, such as name, description, and image.
// It also establishes a one-to-many relationship with the Product model, allowing each category to have multiple products.

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  image       String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  products    Product[]
}

// Product
model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  price         Float
  stockCount    Int
  sku           String?
  categoryId    Int
  brand         String?
  videoUrl      String?
  weight        Float?
  discount      Float?
  salePrice     Float?
  createdAt     DateTime       @default(now())
  productImages ProductImage[]
  reviews       Reviews[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  ProductTags   ProductTags[]
  category      Category       @relation(fields: [categoryId], references: [id])
  orders        Order[]        // Rename 'Order' to 'orders' to follow naming convention
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  productId  Int
  imageUrl   String
  isFeatured Boolean @default(false)
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductTags {
  id        Int     @id @default(autoincrement())
  productId Int
  tag       String
  product   Product @relation(fields: [productId], references: [id])
}

// Review model
model Reviews {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// Contact model
model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  phone     String
  createdAt DateTime @default(now())
}

model newsLetter {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}
